generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts     Account[]
  sessions     Session[]
  subscription Subscription?
  cases        Case[]
  caseFiles    CaseFile[]
}

model Subscription {
  id                   String   @id @default(cuid())
  userId               String   @unique
  planId               String
  status               String
  stripeSubscriptionId String?  @unique
  stripeCustomerId     String?  @unique
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Case {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  country     String
  caseType    String
  status      String   @default("active") // active, closed, archived
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  CaseMessage[]
  summaries CaseSummary[]
  files     CaseFile[]

  @@index([userId])
  @@index([status])
}

model CaseMessage {
  id        String   @id @default(cuid())
  caseId    String
  role      String // user, assistant
  content   String   @db.Text
  createdAt DateTime @default(now())

  case Case @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@index([caseId])
  @@index([createdAt])
}

model CaseSummary {
  id              String @id @default(cuid())
  caseId          String
  caseDescription String

  legalAnalysis        Json
  evidenceChecklist    Json
  nextCriticalDeadline Json?
  timelineEvents       Json

  urgency      String
  messageCount Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  case Case @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@index([caseId])
  @@index([createdAt])
  @@index([urgency])
}

model CaseFile {
  id               String   @id @default(cuid())
  caseId           String
  filename         String // Sanitized filename for storage
  originalFilename String // Original filename shown to user
  storagePath      String // Full path in Supabase Storage: userId/caseId/fileId/filename
  filesize         Int
  mimetype         String
  uploadedBy       String
  createdAt        DateTime @default(now())

  case Case @relation(fields: [caseId], references: [id], onDelete: Cascade)
  user User @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)

  @@index([caseId])
  @@index([uploadedBy])
}
